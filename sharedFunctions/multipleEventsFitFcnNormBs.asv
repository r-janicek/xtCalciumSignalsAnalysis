function out = multipleEventsFitFcnNormBs(pos_peak, t, y, ...
    baselineModel, fitFun, t_ups, recalculate, mEvents, mBaseline, ax,...
    useWeights, prevFitCoefSpRise)

%tic
% parameters of function
% pos_peak = position of peaks (not in time)
% t = time
% y = data to fit
% baselineModel = fit function for baseline (poly1, poly2 ...; matlab build in models)
% percBaseline = how many percent of signal is baseline
% fitFun = fit function to fit individual events
% fitting = fminsearch, lsqnonlin, fmincon
% recalculate = refit baseline and peaks 0 or 1
% mEvents = mask of events
% mBaseline = mask of baseline
% ax = handle of axes where final fit will be plotted
% useWeights
% prevFitCoefSpRise = coefficients from previous fitting, sparkRise fit [t0,tR,A,y0]

% make column vectors
t = t(:);
y = y(:);
mEvents = logical(mEvents);
mBaseline = logical(mBaseline);
N_events = numel(pos_peak);

pos_peak = pos_peak(:);
% get values of peaks
val_peak = y(pos_peak);

% remove baseline artefact, fit baseline with polynom
[f_baseline, fit_baseline] = fitOfBaseline(t, y, mBaseline, baselineModel);
fit_baseline = zeros(size(y));
f_baseline = @(t) zeros(size(t));

% event fit function
[fun_event, p0, lb, ub, n_coef_event, coeff_n] = setFitFunction(...
    fitFun, N_events, t, y, val_peak, pos_peak, prevFitCoefSpRise);

% do fitting
events_coeff = fitOfData(p0, t, y, n_coef_event, fun_event, ...
    N_events, fit_baseline, mEvents, fitFun, ax, useWeights, lb, ub);

% calculate final fit and fits of events 
[F, F_events, F_individualEvents] = sumEventsOutput( ...
    events_coeff, t, n_coef_event, fun_event, N_events, fit_baseline);

% recalculate baseline with removed fits and repeat fitting procedure
if recalculate  
    keyboard
    % do fitting of whole profile at once
    options = optimoptions('fmincon', ...
        'TolFun',1e-9, 'TolX',1e-9, 'TolCon',1e-9,...
        'MaxIter',1000, 'MaxFunEvals',3000, 'UseParallel',0,...
        'OutputFcn',@(x,optimValues,state)outFcnFmincon(x,optimValues,state,ax,t,n_coef_event,fun_event,N_events,fit_baseline));
            
    events_coeff = fmincon(@(p)fitFunSumOfSquaers(p,t,y,n_coef_event,fun_event,N_events,fit_baseline),...
        events_coeff,[],[],[],[],lb,ub,...
        @(p)nonlinEq(p,t,fun_event,fitFun,n_coef_event,numel(events_coeff)),options);
    
    % calculate final fit and fits of events 
    [F,F_events,F_individualEvents] = sumEventsOutput(events_coeff,t,n_coef_event,fun_event,N_events,fit_baseline);
end

% create final output structure
events_n = num2cell(zeros(1,N_events));
coefficientsOfEvents = zeros(N_events,n_coef_event);
for i=1:N_events
    events_n(1,i) = {sprintf('event %d',i)};
    coefficientsOfEvents(i,:) = events_coeff( ...
        1+(i-1)*n_coef_event : n_coef_event+(i-1)*n_coef_event );
end

out.t = t;
out.wholeFit = F;
out.allEventsFit = F_events;
out.baselineFit = fit_baseline;
out.individualEventsFits = [events_n ; num2cell(F_individualEvents)];
out.coefficientsOfFittedEvents = [ [{''},coeff_n]; ...
    [events_n',num2cell(coefficientsOfEvents)] ];
out.eventModel = fitFun;

if exist('t_ups', 'var')
    t_ups = t_ups(:);
    % evaluate events with different time axes
    [F_ups, F_events_ups, F_individualEvents_ups] = ...
        sumEventsOutput(events_coeff, t_ups, n_coef_event, fun_event, ...
        N_events, feval(f_baseline,t_ups));
    out.t_ups.wholeFit = F_ups;
    out.t_ups.allEventsFit = F_events_ups;
    out.t_ups.baselineFit = feval(f_baseline, t_ups);
    out.t_ups.individualEventsFits = [events_n; ...
        num2cell(F_individualEvents_ups)];
    out.t_ups.t_ups = t_ups;
end

%toc
end


%%%%%%%%%%%%%%%%%%%%%%%% functions for fitting %%%%%%%%%%%%%%%%%%%%%%%%%%%%
% fit baseline
function [f_baseline,fit_baseline] = fitOfBaseline(t,y,mBaseline,baselineModel)

ft = fittype(baselineModel);
opts = fitoptions('Method','LinearLeastSquares',...
    'Normalize','on',...
    'Robust','Bisquare',...
    'Exclude',~mBaseline);

% fit
[f_baseline, ~,~] = fit(t, y, ft, opts);
fit_baseline = feval(f_baseline,t);

end


% do fitting
function events_coeff = fitOfData(p0,t,y,n_coef_event,fun_event,N_events,fit_baseline,mEvents,fitFun,ax,useWeights,lb,ub)
% find starts and ends of parts of profile with events, they can be
% merged or just single events
a = 1;
ind = 1;

while ind < numel(t)
    
    try
        s(a,1) = find(mEvents(ind:end) == 1,1,'first') + ind - 1;
    catch
        break
    end
    
    try
        e(a,1) = find(mEvents(s(a):end) == 0,1,'first') + s(a) - 2;
    catch
        e(a,1) = numel(mEvents);
    end
    
    ind = e(a,1) + 1;    
    a = a+1; 
end

% fit individual masked events
events_coeff = zeros(size(p0));
for i=1:numel(s)
    
    indx = ismember(p0,t(s(i):e(i)));
    indx = reshape(indx,[n_coef_event,N_events]);
    
    for k=1:N_events
        if sum(indx(:,k))>=1
            
            indx(:,k) = ones(size(indx(:,k)));
        end
    end
    
    p0_mask = reshape(indx,[1,n_coef_event*N_events]);
    t_mask = mEvents;
    t_mask(1:s(i))=0;
    t_mask(e(i):end)=0;
    
    N_events_part = sum(p0_mask)/n_coef_event;
    
    if N_events_part==0
        continue
    end
    
    % part of profile
    yp = y(t_mask);
    tp = t(t_mask);
    bp = fit_baseline(t_mask);
              
    % calculate weights for part of profile, further form 1 the bigger weight
    if useWeights
        wE = (yp+1).^2;
    else
        wE = ones(size(yp));
    end
    
    %%%%% do fitting    
    options = optimoptions('fmincon', ...
        'TolFun',1e-12, 'TolX',1e-12, 'TolCon',1e-12,...
        'MaxIter',1000, 'MaxFunEvals',3000, ...
        'UseParallel',false, 'Display','none',...
        'OutputFcn',''); % @(x,optimValues,state)outFcnFmincon(x,optimValues,state,ax,tp,n_coef_event,fun_event,N_events_part,bp));
   
    events_coeff(p0_mask) = fmincon(@(p)fitFunSumOfSquaersW(p,tp,yp,n_coef_event,fun_event,N_events_part,bp,wE),...
        p0(p0_mask),[],[],[],[],lb(p0_mask),ub(p0_mask),...
        @(p)nonlinEq(p,tp,fun_event,fitFun,n_coef_event,N_events_part),options);
    
                           
             
            % [F,F_events,F_individualEvents] = sumEvents( ...
            %     p0(p0_mask), tp, n_coef_event, ...
            %     fun_event, N_events_part, bp);
            %  figure
            %  plot(tp,yp)
            %  hold on 
            %  plot(tp,F,'r')
             
       
end

end


% set fit function
function [fun_event,p0,lb,ub,n_coef_event,coeff_n] = ...
    setFitFunction(fitFun,N_events,t,y,val_peak,pos_peak,prevFitCoefSpRise)

switch fitFun

    case 'expModGauss'
        % function from: chromatography journal
        % convolution of CDF of normal distribution and exponential decay function       
        
        % coefficients: [A,m,sd,tau]
        fun_event = @(p,t) p(1).*exp(p(2)/p(4) + p(3)^2/(2*p(4)^2) - t./p(4)).*cdf('Normal',t,p(2)+(p(3)^2/p(4)),p(3));
        
        n_coef_event = 4;
        coeff_n = {'A','m','sd','tauD'};
              
        p0 = zeros(1,N_events*n_coef_event);
        lb = zeros(1,N_events*n_coef_event);
        ub = inf(1,N_events*n_coef_event);
        
        for i=1:N_events
            
            p0(1 + (i-1)*n_coef_event) = val_peak(i);
            p0(2 + (i-1)*n_coef_event) = t(pos_peak(i));
            p0(3 + (i-1)*n_coef_event) = 10;
            p0(4 + (i-1)*n_coef_event) = 20;           
        
        end
          
             
    case '1expR1expD'    
        % Lacampagne et al, 1999
        % coefficients: [t0, tmax, tauR, A, tauD] 
        % piecewise
%         fun_event = @(p,t) (t<p(1)).*0 + ...
%                            (t>=p(1) & t<=p(2)).*( (1-exp(-(t-p(1))./p(3))).*p(4) ) + ...
%                            (t>p(2)).*( p(4).*(1-exp(-(p(2)-p(1))./p(3))).*exp(-(t-p(2))./p(5)) );
        
        fun_event = @(p,t) (t<p(1)).*0 + ...
                           (t>=p(1)).*( (1-exp(-(t-p(1))./p(3))).*p(4) ) .* exp(-(t-p(2))./p(5));               
                       
        n_coef_event = 5;
        coeff_n = {'t0','tmax','tauR','Ampl','tauD'};
        
        p0 = zeros(1,N_events*n_coef_event);
        lb = zeros(1,N_events*n_coef_event);
        ub = inf(1,N_events*n_coef_event);
        
        for i=1:N_events
            
            [~,t0] = min( abs(t-prevFitCoefSpRise(i,1)) );
            
            p0(1 + (i-1)*n_coef_event) = t(t0);
            p0(2 + (i-1)*n_coef_event) = t(pos_peak(i));
            p0(3 + (i-1)*n_coef_event) = 5;
            p0(4 + (i-1)*n_coef_event) = val_peak(i);
            p0(5 + (i-1)*n_coef_event) = 15;
        end
        
           
    case '1expR2expD'
        %coefficients: [t0, tmax, tauR1, Ampl, tauD1, tauD2]               
        fun_event = @(p,t) (t<p(1)).* 0 + ...
                           (t>=p(1) & t<=p(2)).*( (1-exp(-(t-p(1))./p(3)))  .*p(4) ) + ...
                           (t>p(2)).*( (1-exp(-(p(2)-p(1))./p(3))) .*p(4) .*( exp(-(t-p(2))./p(5)) + exp(-(t-p(2))./p(6)) ) );
               
        n_coef_event = 6;
        coeff_n = {'t0','tmax','tauR','Ampl','tauD1','tauD2'};
        
        p0 = zeros(1,N_events*n_coef_event);
        lb = zeros(1,N_events*n_coef_event);
        ub = inf(1,N_events*n_coef_event);
        
        for i=1:N_events
            
            [~,t0] = min( abs(t-prevFitCoefSpRise(i,1)) );
            
            p0(1 + (i-1)*n_coef_event) = t(t0);
            p0(2 + (i-1)*n_coef_event) = t(pos_peak(i));
            p0(3 + (i-1)*n_coef_event) = 5;
            p0(4 + (i-1)*n_coef_event) = val_peak(i);
            p0(5 + (i-1)*n_coef_event) = 10;
            p0(6 + (i-1)*n_coef_event) = 20;
        end
      
        
    case 'CaSpikeFun'
        %coefficients: [t0, FM, tA, tI, FI]  
        fun_event = @(p,t) (t < p(1)) .* 0 + ...
                           (t >= p(1)) .* (0 + (p(2)*((-3*p(3)*(2 + (-1 + p(5))*p(3))*(4*p(3) - 7*p(4))*(p(3) - 3*p(4)))./(2*exp((2*(t-p(1)))/p(3)))+...
                                (3*p(3)*(p(3) - 3*p(4))*(p(3) - 2*p(4)))./exp((t-p(1))/p(3)) +(3*p(3)*(5 + (-1 + p(5))*p(3))*(2*p(3) - 5*p(4))*(p(3) - p(4)))./(5*exp((5*(t-p(1)))/p(3)))-...
                                (p(3)*(6 + (-1 + p(5))*p(3))*(p(3) - 2*p(4))*(p(3) - p(4)))./(6*exp((6.*(t-p(1)))/p(3))) -(6*p(4)^3*(1 + (-1 + p(5))*p(4)))./exp((t-p(1))/p(4))+...
                                (18*p(4)^3*(p(3) + p(4) + (-1 + p(5))*p(3)*p(4)))./(exp((p(3)^(-1) + p(4)^(-1)).*(t-p(1)))*(p(3) + p(4))) -... 
                                (18*p(4)^3*(p(3) + (2 + (-1 + p(5))*p(3))*p(4)))./(exp((2/p(3) + p(4)^(-1)).*(t-p(1)))*(p(3) + 2*p(4)))+...
                                (6*p(4)^3*(p(3) + (3 + (-1 + p(5))*p(3))*p(4)))./(exp((3/p(3) + p(4)^(-1)).*(t-p(1)))* (p(3) + 3*p(4))) -... 
                                (3*p(3)*(4 + (-1 + p(5))*p(3))*(5*p(3)^2 - 20*p(3)*p(4) +17*p(4)^2))./(4.*exp((4.*(t-p(1)))/p(3))) +...
                                (p(3)*(p(3)^2*(57 + 10*(-1 + p(5))*p(3)) - 3*p(3)*(84 + 13*(-1 + p(5))*p(3))*p(4) + (249 + 29*(-1 + p(5))*p(3))*p(4)^2))./(3.*exp((3.*(t-p(1)))/p(3)))-... 
                                ((-1 + p(5))*(p(3) - 3*p(4))*(p(3) - 2*p(4))*(p(3) - p(4))*(37*p(3)^4 + 252*p(3)^3*p(4) + 605*p(3)^2*p(4)^2 + 660*p(3)*p(4)^3 + 360*p(4)^4))./...
                                (60*(p(3) + p(4))*(p(3) + 2*p(4))*(p(3) + 3*p(4))) +  (6*(-1 + p(5))*p(3)^2*(p(3) - 3*p(4))*(p(3) - 2*p(4)).*...
                                cosh((t-p(1))/p(3)))./exp((2.*(t-p(1)))/p(3))))/...
                                ((p(3) - 3*p(4))*(p(3) - 2*p(4))*(p(3) - p(4))));
               
        n_coef_event = 5;
        coeff_n = {'t0','FM','tauR','tauD','FI'};    
        
        % prevFitCoefSpRise: sparkRise [t0,tR,A,y0]
        
        p0 = zeros(1,N_events*n_coef_event);
        lb = zeros(1,N_events*n_coef_event);
        ub = inf(1,N_events*n_coef_event);
        
        for i=1:N_events
            
            [~,t0] = min( abs(t-prevFitCoefSpRise(i,1)) );
            
            p0(1 + (i-1)*n_coef_event) = t(t0);
            p0(2 + (i-1)*n_coef_event) = val_peak(i);
            p0(3 + (i-1)*n_coef_event) = 3;
            p0(4 + (i-1)*n_coef_event) = 5;
            p0(5 + (i-1)*n_coef_event) = 1;

            lb(5 + (i-1)*n_coef_event) = 1;  
            ub(5 + (i-1)*n_coef_event) = 1;      
                                  
        end
   
end

end


% sum N_events together using chosen function and proper initial
% parameters
function [F,F_events,F_individualEvents] = sumEvents(p,t, ...
    n_coef_event,fun_event,N_events,fit_baseline)

F_events = zeros(numel(t),1);
F_individualEvents = zeros(numel(t),N_events);
for j=1:N_events
    
    F_event = fun_event(p(1+(j-1)*n_coef_event:n_coef_event+(j-1)*n_coef_event),t);
    %F_event(~isfinite(F_event))=0;
    
    F_events = F_events + F_event;
    F_individualEvents(:,j) = F_event;
    
end

F = F_events + fit_baseline;

end

% OUTPUT, change NaNs to zeros 
% sum N_events together using chosen function and proper initial
% parameters
function [F,F_events,F_individualEvents] = sumEventsOutput(p,t, ...
    n_coef_event,fun_event,N_events,fit_baseline)

F_events = zeros(numel(t),1);
F_individualEvents = zeros(numel(t),N_events);
for j=1:N_events
    
    F_event = fun_event(p(1+(j-1)*n_coef_event:n_coef_event+(j-1)*n_coef_event),t);
    F_event(~isfinite(F_event))=0;
    
    F_events = F_events + F_event;
    F_individualEvents(:,j) = F_event;
    
end

F = F_events + fit_baseline;

end



% fit function to use with fminsearch, fmincon; function returning
% scalar
function resSum = fitFunSumOfSquaers(p,t,y,n_coef_event,fun_event,N_events,fit_baseline)

[F,~,~] = sumEvents(p,t,n_coef_event,fun_event,N_events,fit_baseline);
resSum = sum((y - F).^2);

end
% weighted
function resSum = fitFunSumOfSquaersW(p,t,y,n_coef_event,fun_event,N_events,fit_baseline,wE)

[F,~,~] = sumEvents(p,t,n_coef_event,fun_event,N_events,fit_baseline);
resSum = sum(wE.*(y - F).^2);

end


% nonlinear equalities for fmincon
function [c,ceq] = nonlinEq(p,x,fun,model,n_coef_event,N_events_part)
%keyboard
% delta x
dt = mean(diff(x));

% break points and equalities
switch model
           
    case 'expModGaussPiecewise'
         %keyboard            
        % equal value of function in break point 
        c = [];
         
%         ceq1 = zeros(1,N_events_part);
%         for ii=1:N_events_part
%            
%            pEvent = p(1+(ii-1)*n_coef_event:n_coef_event+(ii-1)*n_coef_event);                               
%            ceq1(ii) = fun(pEvent,pEvent(1)-dt) - fun(pEvent,pEvent(1));
%                                 
%         end
%                  
% 
% % 
%  %[F,~,~] = sumEvents(p,x,n_coef_event,fun,N_events_part,zeros(numel(x),1));
% %         figure
% %         plot(x,F,'ko')
%         
%                          
%        br = p(1:n_coef_event:N_events_part*n_coef_event);      
%        
%        [~,br_p] = min( abs(x-br), [], 1 );
%                     
%        [F_l,~,~] = sumEvents(p,x(br_p-1),n_coef_event,fun,N_events_part,zeros(numel(br),1));
%        [F_r,~,~] = sumEvents(p,x(br_p),n_coef_event,fun,N_events_part,zeros(numel(br),1));     
%        ceq2(1:numel(br)) = F_l - F_r;
% % 
% %     
%       ceq = [ceq1,ceq2];

       ceq = [];
        
    case '1expR1expD'
                          
        br = p(1:n_coef_event:N_events_part*n_coef_event);
               
        % equal value of function in break point 
        c = [];
        ceq(1:numel(br)) = fun(p,br-dt) - fun(p,br);
        ceq = [];
                 
    case '2expR2expD'
                          
        br = p(1:n_coef_event:N_events_part*n_coef_event);
               
        % equal value of function in break point 
        c = [];
        ceq(1:numel(br)) = fun(p,br-dt) - fun(p,br);
%         ceq(1) = fun(p,br2-dt) - fun(p,br2);
        ceq = [];
    
    otherwise        
        % equal F
        c = [];
        ceq = [];
                       
end

% % equal value of differential of function in break point
%ceq(2) = diff(fun(p,(br:dt:br+dt))) - diff(fun(p,(br-dt:dt:br)));

end


% output function for fmincon
function stop = outFcnFmincon(x,optimValues,state,ax,tp,n_coef_event,fun_event,N_events_part,bp)

stop = false;

% stop fitting if stop button in fit profile window is pressed
stop = getappdata(ax.Parent,'stopFiting');


[F,~,~] = sumEvents(x,tp,n_coef_event,fun_event,N_events_part,bp);
      
%delete(findobj(ax,'Tag','partialFit'))

hl = findobj(ax,'Tag','partialFit');

switch state
    
    case 'iter'
        %keyboard
        % Make updates to plot or guis as needed
        set(hl,'XData',tp,'YData',F)
%         line(tp,F,'Parent',ax,'Color','b','LineStyle','-','LineWidth',2,...
%             'Tag','partialFit');
        drawnow
        
    case 'interrupt'
        % Probably no action here. Check conditions to see
        % whether optimization should quit.
        
    case 'init'
        % Setup for plots or guis             
        line(tp,F,'Parent',ax,'Color','b','LineStyle','-','LineWidth',2,...
                'Tag','partialFit');
        drawnow
        
    case 'done'
        % Cleanup of plots, guis, or final plot  
        set(hl,'XData',tp,'YData',F,'Tag','finalPartialFit')
        
%         line(tp,F,'Parent',ax,'Color','b','LineStyle','-','LineWidth',2,...
%             'Tag','finalPartialFit')
        drawnow
        
    otherwise
        
end

end











