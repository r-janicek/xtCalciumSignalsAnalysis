function figHandles = analyzedCaEventsFiguresToSave( ...
    n_evnts_fig, evntsTbl, eventsAxesLayout)
% create final figures of analyzed events with predefined number of events
% per figure
%% maximum 9 events pre figure
possible_n_evnts_perFig = [1, 2, 4, 9, 12];
[~, ind_n_evntsPerFig] = min(abs(possible_n_evnts_perFig-n_evnts_fig));
n_evnts_fig = possible_n_evnts_perFig(ind_n_evntsPerFig);
% setup parameters
scSz = get(0,'ScreenSize');
if scSz(3) > scSz(4)
    orientation = 'l';
    rScSz = scSz(4)/scSz(3);
else
    orientation = 'p';
    rScSz = scSz(3)/scSz(4);
end
switch n_evnts_fig
    case 1
        n_r = 1;
        n_c = 1;
        fontSzT = 22;
        fontSzL = 20;
        fontSzNum = 16;
        fontSzLegend = 16;
        ax_c = 0.5;
        switch orientation
            case 'l'
                fig_w = rScSz;
                fig_h = 1;
            case 'p'
                fig_w = 1;
                fig_h = rScSz;
        end
        
    case 2
        n_r = 2;
        n_c = 1;
        fontSzT = 20;
        fontSzL = 18;
        fontSzNum = 14;
        fontSzLegend = 16;
        ax_c = 0.75;
        switch orientation
            case 'l'
                fig_w = rScSz;
                fig_h = 1;
                
            case 'p'
                fig_w = 1;
                fig_h = rScSz;
        end
        
    case 4
        n_r = 2;
        n_c = 2;
        fontSzT = 18;
        fontSzL = 16;
        fontSzNum = 14;
        fontSzLegend = 14;
        ax_c = 0.75;
        switch orientation
            case 'l'
                fig_w = min(rScSz*1.25,1);
                fig_h = 1;    
            case 'p'
                fig_w = 1;
                fig_h = rScSz;
        end
        
    case 9
        n_r = 3;
        n_c = 3;
        fontSzT = 14;
        fontSzL = 12;
        fontSzNum = 10;
        fontSzLegend = 10;
        ax_c = 0.5;
        switch orientation
            case 'l'
                fig_w = 1;
                fig_h = 1;    
            case 'p'
                fig_w = 1;
                fig_h = rScSz;
        end

    case 12
        n_r = 3;
        n_c = 4;
        fontSzT = 12;
        fontSzL = 10;
        fontSzNum = 8;
        fontSzLegend = 8;
        ax_c = 0.375;
        switch orientation
            case 'l'
                fig_w = 1;
                fig_h = 1;
            case 'p'
                fig_w = 1;
                fig_h = rScSz;
        end
end
pxSzX = mean(diff(evntsTbl.axData{1}.x), 'all');
pxSzT = mean(diff(evntsTbl.axData{1}.t), 'all');
% get position of panels for individual events in figure
hf = figure('Visible','off', 'Units','normalized',...
        'OuterPosition',[(1-fig_w)/2 1-fig_h fig_w fig_h]);
tl = tiledlayout(hf, n_r, n_c, "TileSpacing", "compact");
axPosInFig = zeros(n_r*n_c, 4);
for a = 1:n_r*n_c
    ax = nexttile(tl);
    axPosInFig(a,:) = ax.OuterPosition;
end
close(hf)
dx = min(axPosInFig(:,1));
dy = min(axPosInFig(:,2));
% shift axes
% axPosInFig(:,1) = axPosInFig(:,1) - dx*ax_c/5 + ...
%     round(axPosInFig(:,1)./axPosInFig(:,3)).*(ax_c*dx);
% axPosInFig(:,2) = axPosInFig(:,2) - ax_c*dy + ...
%     round(axPosInFig(:,2)./axPosInFig(:,4)).*(ax_c*dy);
% size of axes in panel for individual event
switch eventsAxesLayout
    case 'inSingleRow'
        % next to each other
        w_a = (axPosInFig(1,3)-2*dx)/3;
        h_a = axPosInFig(1,4)-3*dy;
    case 'square'
        % in square
        dxy_p = 10;
        w_a = (axPosInFig(1,3)-dx/dxy_p-dx)/2;
        h_a = (axPosInFig(1,4)-dy/dxy_p-1*dy)/2;
end
N_figs = ceil(height(evntsTbl)/n_evnts_fig);
figHandles = gobjects(N_figs,1);
for f = 1:N_figs
    figHandles(f) = figure('Tag','CaEventParam',...
        'Name',sprintf('CaEventParamFigure #%d',f),...
        'Visible','on', 'Units','normalized',...
        'OuterPosition',[(1-fig_w)/2 1-fig_h fig_w fig_h]);
    for a = 1:size(axPosInFig, 1)
        axPos = axPosInFig(a,:);
        % show individual calcium events
        evntInd = n_evnts_fig*(f-1)+a;
        if evntInd > height(evntsTbl)
            continue
        end
        switch eventsAxesLayout
            case 'inSingleRow'
                % single row layout of individual events in figure
                % image axes
                ha_img = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[axPos(1) ...
                    (axPos(2)+axPos(4))-h_a ...
                    w_a*1.25 h_a]);
                % t-profile axes
                ha_tProf = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[ha_img.Position(1)+ha_img.Position(3)+dx ...
                    (axPos(2)+axPos(4))-h_a ...
                    w_a*1.25 h_a]);
                % x-profile axes
                ha_xProf = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[ha_tProf.Position(1)+ha_tProf.Position(3)+dx ...
                    (axPos(2)+axPos(4))-h_a ...
                    w_a*0.5 h_a]);
                % text axes, parameters of analyzed event
                ax_txt_b = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[axPos(1) ...
                    (axPos(2)+axPos(4))-2*dy-h_a ...
                    axPos(3) dy], ...
                    'Visible','off');
                      
            case 'square'
                % square layout of individual events in figure
                % image axes
                ha_img = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[axPos(1) ...
                    (axPos(2)+axPos(4))-h_a ...
                    w_a*1.25 h_a]);
                % t-profile axes
                ha_tProf = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[axPos(1) ...
                    (axPos(2)+axPos(4))-2*h_a-dy/dxy_p ...
                    w_a*1.25 h_a]);
                % x-profile axes
                ha_xProf = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[ ...
                    ha_img.Position(1)+ha_img.Position(3)+dx/dxy_p ...
                    (axPos(2)+axPos(4))-h_a ...
                    w_a*0.75 h_a]);
                % text axes, parameters of analyzed event
                ax_txt_b = axes(figHandles(f), 'Units','normalized', ...
                    'Position',[ ...
                    ha_tProf.Position(1)+ha_tProf.Position(3)+dx/dxy_p ...
                    (axPos(2)+axPos(4))-2*h_a-dy/dxy_p ...
                    axPos(3) h_a], ...
                    'Visible','off');
        end
        % show event
        % show event image
        switch evntsTbl.calcMethod{evntInd}
            case '2DGauss'
                mesh(evnt.axData{1}.T, evnt.axData{1}.X, evnt.axData{1}.imgE, ...
                    'LineStyle','-', 'LineWidth',0.5, ...
                    'FaceColor','none', 'EdgeColor','k', ...
                    'EdgeAlpha',0.4, 'Parent',ha_img)
                %plot3(T, X, D, 'LineStyle','-',
                % 'Marker','.', 'Color',[0.1 0.1 0.1], 'Parent',ha1)
                hold(ha_img, 'on')
                surf(evnt.axData{1}.T, evnt.axData{1}.X, evnt.axData{1}.imgE_fit, ...
                    'FaceAlpha',0.6, 'EdgeColor','none', ...
                    'FaceColor','interp', 'Parent',ha_img)
                line(evnt.axData{1}.t_ups(:), evnt.axData{1}.x_ups_peak(:), ...
                    evnt.axData{1}.t_prof_fit(:), ...
                    'Parent',ha_img, 'LineWidth',3, 'Color','k')
                line(evnt.axData{1}.t_ups_peak(:), evnt.axData{1}.x_ups(:), ...
                    evnt.axData{1}.x_prof_fit(:), ...
                    'Parent',ha_img, 'LineWidth',3, 'Color','k')
                set(ha_img, 'XLim',[min(evnt.axData{1}.t) max(evnt.axData{1}.t)], ...
                    'YLim',[min(evnt.axData{1}.x) max(evnt.axData{1}.x)], ...
                    'ZLim',[min(evnt.axData{1}.imgE, [],'all'), ...
                    max(evnt.axData{1}.imgE(evnt.axData{1}.imgE_m), [],'all')*1.05])
                old_img_cLims = get(ha_img, 'Clim');
                % in case taht in image of events there is also a part
                % of another event with much higher amplitude
                set(ha_img, 'Clim', [old_img_cLims(1) ...
                    prctile(evnt.axData{1}.imgE(evnt.axData{1}.imgE_m),99,'all')])
                colormap(jet)
                view(ha_img, -15,40)
                set(ha_img,'YDir','normal', 'FontSize',fontSzNum)
                title(ha_img, {[evnt.axDesc{1}.fig_title_txt,' -- 2D gauss fit'], ...
                    evntsTbl.axData{evntInd}.txt_a}, ...
                    'FontSize',fontSzT)
                xlabel(ha_img,'t (ms)', 'FontSize',fontSzL)
                ylabel(ha_img,'x (\mum)', 'FontSize',fontSzL)
                zlabel(ha_img, evntsTbl.axDesc{evntInd}.ylabel, ...
                    'FontSize',fontSzL)
            otherwise
                image(evntsTbl.axData{evntInd}.imgE, ...
                    'YData',[min(evntsTbl.axData{evntInd}.x_ups) ...
                    max(evntsTbl.axData{evntInd}.x_ups)], ...
                    'XData',[min(evntsTbl.axData{evntInd}.t_ups) ...
                    max(evntsTbl.axData{evntInd}.t_ups)], ...
                    'CDataMapping','scaled', 'Parent',ha_img)
                % show lines of areas from where profiles are
                % calculated
                r_m = evntsTbl.axData{evntInd}.r_m;
                n_px_t = evntsTbl.axData{evntInd}.n_px_t;
                c_m = evntsTbl.axData{evntInd}.c_m;
                n_px_x = evntsTbl.axData{evntInd}.n_px_x;
                line(get(ha_img,'XLim'), ...
                    [(r_m-1-(n_px_t-1)/2)*pxSzX (r_m-1-(n_px_t-1)/2)*pxSzX], ...
                    'Parent',ha_img, 'LineWidth',1, ...
                    'Color','k', 'LineStyle','-');
                line(get(ha_img,'XLim'), ...
                    [(r_m-1+(n_px_t-1)/2)*pxSzX (r_m-1+(n_px_t-1)/2)*pxSzX], ...
                    'Parent',ha_img, 'LineWidth',1, ...
                    'Color','k', 'LineStyle','-');
                line([(c_m-1-(n_px_x-1)/2)*pxSzT (c_m-1-(n_px_x-1)/2)*pxSzT], ...
                    get(ha_img,'YLim'), 'Parent',ha_img, ...
                    'LineWidth',1, 'Color','k', 'LineStyle','-');
                line([(c_m-1+(n_px_x-1)/2)*pxSzT (c_m-1+(n_px_x-1)/2)*pxSzT], ...
                    get(ha_img,'YLim'), 'Parent',ha_img, ...
                    'LineWidth',1, 'Color','k', 'LineStyle','-');
                set(ha_img, 'FontSize',fontSzNum)
                old_img_cLims = get(ha_img, 'Clim');
                % in case taht in image of events there is also a part
                % of another event with much higher amplitude
                set(ha_img, 'Clim', [old_img_cLims(1) ...
                    prctile(evntsTbl.axData{evntInd}.imgE(evntsTbl.axData{evntInd}.imgE_m),99,'all')])
                title(ha_img, ...
                    {evntsTbl.axDesc{evntInd}.fig_title_txt, ...
                    evntsTbl.axData{evntInd}.txt_a}, ...
                    'FontSize',fontSzT)
                xlabel(ha_img,'t (ms)', 'FontSize',fontSzL)
                ylabel(ha_img,'x (\mum)', 'FontSize',fontSzL)
        end

        % show t-profile
        line(evntsTbl.axData{evntInd}.t, ...
            evntsTbl.axData{evntInd}.t_event_prof, 'Parent',ha_tProf, ...
            'LineWidth',1, 'Color','k', 'Display','data')
        line(evntsTbl.axData{evntInd}.t_ups, ...
            evntsTbl.axData{evntInd}.t_prof_fit, 'Parent',ha_tProf, ...
            'LineWidth',2, 'Color','r', ...
            'Display',evntsTbl.axData{evntInd}.t_prof_fit_txt)
        % show exponential fits
        if ~isempty(evntsTbl.axData{evntInd}.t_rise)
            line(evntsTbl.axData{evntInd}.t_rise, ...
                evntsTbl.axData{evntInd}.t_profR_fit, ...
                'Parent',ha_tProf, ...
                'LineWidth',2, 'Color','c', ...
                'LineStyle',':', 'Display','exp rise fit')
            line(evntsTbl.axData{evntInd}.t_decay, ...
                evntsTbl.axData{evntInd}.t_profD_fit, ...
                'Parent',ha_tProf, ...
                'LineWidth',2, 'Color','m', ...
                'LineStyle',':', 'Display','exp decay fit')
        end
        set(ha_tProf, 'FontSize',fontSzNum)
        title(ha_tProf, evntsTbl.axDesc{evntInd}.ax_profT_title_txt, ...
            'FontSize',fontSzT)
        xlabel(ha_tProf, 't (ms)', 'FontSize',fontSzL)
        ylabel(ha_tProf, evntsTbl.axDesc{evntInd}.ylabel, ...
            'FontSize',fontSzL)
        xlim(ha_tProf, [min(evntsTbl.axData{evntInd}.t_ups) ...
            max(evntsTbl.axData{evntInd}.t_ups)])
        ylim(ha_tProf, getAxisLimits( ...
            [evntsTbl.axData{evntInd}.t_event_prof(:); ...
            evntsTbl.axData{evntInd}.t_prof_fit(:)], 1))
        line([evntsTbl.axData{evntInd}.half_max_t_1 ...
            evntsTbl.axData{evntInd}.half_max_t_2], ...
            [evntsTbl.axData{evntInd}.half_max_t ...
            evntsTbl.axData{evntInd}.half_max_t], 'Parent',ha_tProf,...
            'LineWidth',2, 'Color','b', 'Display','FDHM')
        line([evntsTbl.axData{evntInd}.t_max evntsTbl.axData{evntInd}.t_max], ...
            [evntsTbl.axData{evntInd}.bs_t evntsTbl.axData{evntInd}.v_max], ...
            'Parent',ha_tProf, 'LineWidth',2, 'Color','g', ...
            'Display','amplitude')
        line([evntsTbl.axData{evntInd}.t0 evntsTbl.axData{evntInd}.t_max], ...
            [evntsTbl.axData{evntInd}.bs_t evntsTbl.axData{evntInd}.bs_t], ...
            'Parent',ha_tProf, 'LineWidth',2, 'Color','m', 'Display','TTP')
        hl_3 = legend(ha_tProf, 'show');
        hl_3.Location = 'best';
        hl_3.FontSize = fontSzLegend;

        % show x-profile
        ha_xProf.YAxis.Direction = "reverse";
        line(evntsTbl.axData{evntInd}.x_event_prof, ...
            evntsTbl.axData{evntInd}.x, ...
            'Parent',ha_xProf, ...
            'LineWidth',1, 'Color','k', 'Display','data')
        line(evntsTbl.axData{evntInd}.x_prof_fit, ...
            evntsTbl.axData{evntInd}.x_ups, ...
            'Parent',ha_xProf, ...
            'LineWidth',2, 'Color','r', ...
            'Display',evntsTbl.axData{evntInd}.x_prof_fit_txt)
        set(ha_xProf,'FontSize',fontSzNum)
        title(ha_xProf, evntsTbl.axDesc{evntInd}.ax_profX_title_txt, ...
            'FontSize',fontSzT)
        xlabel(ha_xProf, evntsTbl.axDesc{evntInd}.ylabel, ...
            'FontSize',fontSzL)
        ylabel(ha_xProf, 'x (\mum)', 'FontSize',fontSzL)
        ylim(ha_xProf, [min(evntsTbl.axData{evntInd}.x_ups) ...
            max(evntsTbl.axData{evntInd}.x_ups)])
        xlim(ha_xProf, getAxisLimits( ...
            [evntsTbl.axData{evntInd}.x_event_prof(:); ...
            evntsTbl.axData{evntInd}.x_prof_fit(:)], 1))
        line([evntsTbl.axData{evntInd}.half_max_x ...
            evntsTbl.axData{evntInd}.half_max_x], ...
            [evntsTbl.axData{evntInd}.half_max_x_1 ...
            evntsTbl.axData{evntInd}.half_max_x_2], ...
            'Parent',ha_xProf, 'LineWidth',2, 'Color','b', 'Display','FWHM')
        hl_2 = legend(ha_xProf,'show');
        hl_2.Location = 'best';
        hl_2.FontSize = fontSzLegend;

        % show parameters of the analyzed event
        params_txt = {
            [sprintf('amplitude = %0.2f',evntsTbl.evntParams{evntInd}.amplitude), ...
            ' (',char(916),sprintf('F/F_0)')],...
            sprintf('TTP = %0.2f (ms)',evntsTbl.evntParams{evntInd}.TTP), ...
            sprintf('FDHM = %0.2f (ms)',evntsTbl.evntParams{evntInd}.FDHM), ...
            [sprintf('FWHM = %0.2f ',evntsTbl.evntParams{evntInd}.FWHM), ...
            '(',char(181),'m)'],...
            [sprintf('sparkMass = %0.2f ',evntsTbl.evntParams{evntInd}.sparkMass), ...
            '(',char(916),'F/F_0*',char(181),'m^3)'], ...
            sprintf('accepted event = %d ',evntsTbl.maskOfAcceptedSparks(evntInd))};

        switch eventsAxesLayout
            case 'inSingleRow'
                text(ax_txt_b, 0, 0.8,  ...
                    [{[evntsTbl.axDesc{evntInd}.txt_b, '; ', ...
                    sprintf('calcMethod: %s', evntsTbl.evntParams{evntInd}.calcMethod{1})]}; ...
                    join(params_txt, ' | ')], ...
                    'FontUnits','pixels', ...
                    'FontSize',fontSzL, 'FontWeight','normal', ...
                    'HorizontalAlignment','left', ...
                    'VerticalAlignment','cap')

            case 'square'
                text(ax_txt_b, 0, 0.8,  ...
                    [{evntsTbl.axDesc{evntInd}.txt_b};...
                    {sprintf('calcMethod: %s', evntsTbl.evntParams{evntInd}.calcMethod{1})}; ...
                    params_txt(:)], ...
                    'FontUnits','pixels', ...
                    'FontSize',fontSzL, 'FontWeight','normal', ...
                    'HorizontalAlignment','left', ...
                    'VerticalAlignment','cap')
        end

        
        
        % remove some unnecessary labels 
        if strcmp(eventsAxesLayout, 'square')
            ha_img.XTick = [];
            xlabel(ha_img, []);
            ha_xProf.YTick = [];
            ylabel(ha_xProf, []);
            title(ha_xProf, []);
            title(ha_tProf, []);       
        end
           
    end

end



end